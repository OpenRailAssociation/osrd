## This Docker Compose file is used by the pr-infra-compose.sh script.
# More explanation on its purpose can be found in the script.
#
# This Docker Compose file is very similar to the one used for the development
# environment, except that no services are built (all images are pulled from DockerHub),
# and all ports have been adjusted (by adding +1 or +2 if the +1 port was already in use)
# so that both instances can run concurrently on the same computer.

volumes:
  psql_data:
  valkey_data:
  rabbitmq_data:

networks:
  pr-tests:
    name: osrd_pr_test

services:
  postgres:
    image: ${OSRD_POSTGIS_IMAGE:-postgis/postgis:16-3.4-alpine}
    container_name: osrd-postgres-pr-tests
    user: postgres
    restart: unless-stopped
    ports: ["5433:5433"]
    environment:
      POSTGRES_PASSWORD: "password"
    command: -c port=5433
    volumes:
      - "psql_data:/var/lib/postgresql/data"
      - "../docker/init_db.sql:/docker-entrypoint-initdb.d/init.sql"
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "postgres://osrd:password@postgres:5433/osrd"]
      start_period: 4s
      interval: 5s
      retries: 20
    networks:
      - pr-tests

  valkey:
    image: valkey/valkey:alpine
    container_name: osrd-valkey-pr-tests
    restart: unless-stopped
    ports: ["6380:6380"]
    volumes:
      - "valkey_data:/data"
      - "../docker/valkey.conf:/etc/valkey.conf"
    command: "valkey-server /etc/valkey.conf --port 6380 --save 30 1 --loglevel warning"
    healthcheck:
      test: ["CMD", "valkey-cli", "-p" , "6380", "ping"]
      start_period: 4s
      interval: 5s
      retries: 20
    networks:
      - pr-tests

  rabbitmq:
    image: rabbitmq:4-management
    container_name: osrd-rabbitmq-pr-tests
    ports:
      - "5673:5673"
      - "15673:15673"
    environment:
      RABBITMQ_DEFAULT_USER: osrd
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DIST_PORT: 25673
      RABBITMQ_CONFIG_FILE: "/etc/rabbitmq/rabbitmq.conf"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ../docker/rabbitmq-pr-tests.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - pr-tests

  core:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-core:${PR_NB}
    platform: linux/x86_64
    container_name: osrd-core-dummy-pr-tests
    restart: "no"
    command: "true"
    networks:
      - pr-tests

  editoast:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-editoast:${PR_NB}
    platform: linux/x86_64
    container_name: osrd-editoast-pr-tests
    depends_on:
      postgres: {condition: service_healthy}
      valkey: {condition: service_healthy}
      rabbitmq: {condition: service_healthy}
    restart: unless-stopped
    ports: ["8091:8091"]
    environment:
      EDITOAST_PORT: 8091
      ROOT_URL: "http://localhost:8091"
      VALKEY_URL: "redis://valkey:6380"
      DATABASE_URL: "postgres://osrd:password@postgres:5433/osrd"
      TELEMETRY_KIND: "opentelemetry"
      TELEMETRY_ENDPOINT: "http://jaeger:4319"
      OSRD_MQ_URL: "amqp://osrd:password@osrd-rabbitmq-pr-tests:5673/%2f"
      OSRDYNE_API_URL: "http://osrd-osrdyne-pr-tests:4243/"
    command:
      - /bin/sh
      - -c
      - "diesel migration run && exec editoast runserver"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      start_period: 4s
      interval: 5s
      retries: 6
    networks:
      - pr-tests

  osrd-images:
    image: ghcr.io/openrailassociation/osrd-stable/osrd-images:${TAG_IMAGES-v1.0.0}
    platform: linux/x86_64
    container_name: osrd-images-pr-tests
    restart: unless-stopped
    environment:
      - NGINX_PORT=8081
    ports: ["8081:8081"]
    networks:
      - pr-tests

  gateway:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-gateway:${PR_NB}-front
    platform: linux/x86_64
    container_name: osrd-gateway-pr-tests
    volumes:
      - "../docker/gateway.pr-tests.simple.toml:/srv/gateway.toml"
    restart: unless-stopped
    ports: ["4001:4001"]
    networks:
      - pr-tests

  osrdyne:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-osrdyne:${PR_NB}
    platform: linux/x86_64
    container_name: osrd-osrdyne-pr-tests
    depends_on:
      rabbitmq: {condition: service_healthy}
    volumes:
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
      - ../docker/osrdyne-pr-tests.yml:/osrdyne.yml
    command: osrdyne
    restart: unless-stopped
    ports: ["4243:4243"]
    environment:
      OSRDYNE__WORKER_DRIVER__WORKER_IMAGE: "ghcr.io/openrailassociation/osrd-edge/osrd-core:${PR_NB}"
      RUST_LOG: "info"
    networks:
      - pr-tests

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: osrd-jaeger-pr-tests
    restart: unless-stopped
    command: --collector.otlp.grpc.host-port :4319 --collector.otlp.http.host-port :4320 --query.http-server.host-port :16687 --collector.grpc-server.host-port :14251
    ports:
      - "4319:4319"
      - "4320:4320"
      - "16687:16687"
    networks:
      - pr-tests

  wait-healthy:
    depends_on:
      editoast: {condition: service_healthy}
    restart: "no"
    image: alpine:latest
    command: "true"
    networks:
      - pr-tests
