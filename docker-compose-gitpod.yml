version: '3.8'

volumes:
  psql_data:
  redis_data:

services:
  postgres:
    image: postgis/postgis:13-3.2-alpine
    container_name: osrd-postgres
    networks:
      - osrd
    user: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: "password"
    volumes:
      - "psql_data:/var/lib/postgresql/data"
      - "./init_db.sql:/docker-entrypoint-initdb.d/init.sql"
    healthcheck:
      test: ["CMD", "sh", "-c", '[ "$$(cat /proc/1/cmdline)" = postgres ] && pg_isready']
      start_period: 4s
      interval: 5s

  redis:
    image: redis
    container_name: osrd-redis
    networks:
      - osrd
    restart: unless-stopped
    volumes:
      - "redis_data:/data"
    command: "redis-server --save 30 1 --loglevel warning"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 4s
      interval: 5s

  chartos:
    image: osrd/chartos
    container_name: osrd-chartos
    networks:
      - osrd
    build:
      context: chartos
      dockerfile: Dockerfile
    depends_on:
      postgres: {condition: service_healthy}
      redis: {condition: service_healthy}
    restart: unless-stopped
    command: "uvicorn --factory chartos:make_app --host 0.0.0.0 --port 80"
    ports: ["7000:80"]
    environment:
      PSQL_DSN: "postgres://osrd:password@postgres/osrd"
      ROOT_URL: "http://localhost:7000"
      REDIS_URL: "redis://redis"
      CONFIG_PATH: "/code/chartos.yml"
    healthcheck:
      test: ["CMD", "python", "-c", "from urllib.request import urlopen; exit(0 if urlopen('http://localhost/health').status == 200 else 1)"]
      start_period: 4s
      interval: 5s

  api:
    image: osrd/api
    container_name: osrd-api
    networks:
      - osrd
    depends_on:
      postgres: {condition: service_healthy}
    restart: unless-stopped
    build:
      context: api
      dockerfile: Dockerfile
      args:
        environment: test
    ports: ["8000:80"]
    environment:
      PSQL_HOST: "postgres"
      DJANGO_SETTINGS_MODULE: "config.test"
      CHARTIS_URL: "http://chartos"
      OSRD_BACKEND_URL: "http://osrd-core"
    command:
      - /bin/sh
      - -c
      - |
        python3 manage.py migrate
        exec python3 manage.py runserver 0.0.0.0:80
    # bind the code inside the container
    volumes:
      - ./api:/home/service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      start_period: 4s
      interval: 5s

  core:
    image: osrd/core
    container_name: osrd-core
    networks:
      - osrd
    build:
      context: core
      dockerfile: Dockerfile
    restart: unless-stopped
    command: "java -ea -jar /app/osrd_core.jar api -p 8080"
    environment:
      MIDDLEWARE_BASE_URL: "http://localhost:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      start_period: 4s
      interval: 5s

  front:
    image: osrd/front
    container_name: osrd-front
    networks:
      - osrd
    build:
      context: front
      dockerfile: Dockerfile
      args:
        NGINX_CONFIG: "nginx-dev.conf"
        REACT_APP_LOCAL_BACKEND: "True"
        REACT_APP_API_URL: $REACT_APP_API_URL
        REACT_APP_CHARTIS_URL: $REACT_APP_CHARTIS_URL
    restart: unless-stopped
    ports: ["3000:80"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      start_period: 4s
      interval: 5s

  editoast:
    image: osrd/editoast
    container_name: osrd-editoast
    networks:
      - osrd
    depends_on:
      postgres: {condition: service_healthy}
      chartos: {condition: service_healthy}
    build:
      context: editoast
      dockerfile: Dockerfile
    restart: unless-stopped
    ports: ["8090:8090"]
    environment:
      PSQL_HOST: "postgres"
      CHARTOS_URL: http://chartos/
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      start_period: 4s
      interval: 5s

  wait-healthy:
    depends_on:
      api: {condition: service_healthy}
      chartos: {condition: service_healthy}
      editoast: {condition: service_healthy}
    restart: "no"
    image: alpine:latest
    command: "true"
  
networks:
  osrd:
    driver: bridge
    # default MTU size in docker-compose is 1500
    driver_opts:
      com.docker.network.driver.mtu: 1440
