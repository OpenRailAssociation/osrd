openapi: 3.0.2
info:
  title: OSRD Editoast
  description: OSRD Edition service description
  version: 0.1.0

tags:
  - name: infra
    description: Infra
  - name: routes
    description: Operations related to infra routes
  - name: timetable
    description: Timetable
  - name: pathfinding
    description: Pathfinding operations
  - name: layers
    description: Map layers
  - name: electrical_profiles
    description: Electrical profiles
  - name: train_schedule
    description: Train Schedule

paths:
  /infra/:
    get:
      tags:
        - infra
      summary: Paginated list of all available infras
      parameters:
        - description: Page number
          in: query
          name: page
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: Number of elements by page
          in: query
          name: page_size
          schema:
            default: 25
            maximum: 10000
            minimum: 1
            type: integer
      responses:
        200:
          description: The infras list
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  next: {}
                  previous: {}
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Infra"
                required: [count, next, previous]
    post:
      tags:
        - infra
      summary: Create an infra
      requestBody:
        description: Name of the infra to create
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: The created infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"

  /infra/{id}/:
    get:
      tags:
        - infra
      summary: Retrieve a specific infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: Information about the retrieved infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"
    delete:
      tags:
        - infra
      summary: Delete an infra and all entities linked to it
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

    post:
      tags:
        - infra
      summary: Update/Create/Delete an object of the infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      requestBody:
        description: Operations to do on the infra
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Operation"
      responses:
        200:
          description: An array containing infos about the operations processed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RailjsonObject"

    put:
      tags:
        - infra
      summary: Update an infrastructure name
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      requestBody:
        description: the name we want to give to the infra
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: The updated infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"

  /infra/{id}/load/:
    post:
      tags:
        - infra
      summary: Load an infra if not loaded
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: No content

  /infra/{id}/railjson/:
    get:
      tags:
        - infra
      summary: Serialize an infra to railjson
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
      responses:
        200:
          description: The infra in railjson format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RailjsonFile"

  /infra/railjson/:
    post:
      tags:
        - infra
      summary: Import an infra from railjson
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Infra name
          required: true
        - in: query
          name: generate_data
          schema:
            type: boolean
            description: whether the layer should be generated or no
            default: false
      requestBody:
        description: Railjson infra
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RailjsonFile"
        required: true
      responses:
        201:
          description: The imported infra id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string

  /infra/{id}/switch_types/:
    get:
      tags:
        - infra
      summary: Retrieve a list of switch types
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: A list of switch types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: A switch type following Railjson spec
                  example:
                    id: Point
                    ports: [LEFT, RIGHT, BASE]
                    groups:
                      LEFT: { src: BASE, dst: LEFT }
                      RIGHT: { src: BASE, dst: RIGHT }

  /infra/refresh/:
    post:
      tags:
        - infra
      summary: Refresh the layers
      parameters:
        - in: query
          name: infras
          schema:
            type: array
            items:
              type: integer
            default: []
          description: A list of infra ID
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Force the refresh of the layers
      responses:
        200:
          description: A list thats contains the ID of the infras that were refreshed*
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer

  /infra/voltages/:
    get:
      tags:
        - infra
        - rolling_stock
      summary: List all voltages of all infras
      responses:
        200:
          description: Voltages list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["750V", "1500V", "2500.5V"]

  /infra/{id}/lock/:
    post:
      tags:
        - infra
      summary: Lock an infra from edition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

  /infra/{id}/unlock/:
    post:
      tags:
        - infra
      summary: Unlock an infra from edition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

  /infra/{id}/speed_limit_tags/:
    get:
      tags:
        - infra
      summary: List all speed limit tags
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
      responses:
        200:
          description: Tags list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["freight", "heavy_load"]

  /infra/{id}/voltages/:
    get:
      tags:
        - infra
      summary: List all voltages
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: query
          name: include_rolling_stock_modes
          schema:
            type: boolean
          description: include rolling stocks modes or not
          required: false
      responses:
        200:
          description: Voltages list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["750V", "1500V", "2500.5V"]

  /infra/{id}/objects/{object_type}/:
    post:
      tags:
        - infra
      summary: "Retrieve a list of specific objects in railjson format"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
        - in: path
          name: object_type
          schema:
            $ref: "#/components/schemas/ObjectType"
          description: The type of the object
          required: true
      requestBody:
        description: List of object id's
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: No content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - railjson
                    - geographic
                    - schematic
                  properties:
                    railjson:
                      description: Object properties in railjson format
                      $ref: "#/components/schemas/Railjson"
                    geographic:
                      description: object's geographic in geojson format
                      $ref: "#/components/schemas/Geometry"
                    schematic:
                      description: object's schematic in geojson format
                      $ref: "#/components/schemas/Geometry"

  /infra/{id}/clone/:
    post:
      tags:
        - infra
      summary: Duplicate an infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
        - in: query
          name: name
          schema:
            type: string
          description: New infra name
          required: true
      responses:
        201:
          description: The duplicated infra id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer }

  /single_simulation/:
    post:
      summary: Runs a simulation with a single train, does not write anything to the database
      requestBody:
        description: The details of the simulation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleSimulationRequest"
        required: true
      responses:
        201:
          description: Data about the simulation produced
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleSimulationResponse"

components:
  schemas:
    Comfort:
      description: Train comfort that will be used for the simulation
      type: string
      enum: ["AC", "HEATING", "STANDARD"]
      default: "STANDARD"

    Infra:
      properties:
        id:
          type: integer
        name:
          type: string
        version:
          type: string
          example: "1"
        railjson_version:
          type: string
          example: "3.3.1"
        generated_version:
          type: string
          nullable: true
          example: "1"
        created:
          type: string
          format: date
        modified:
          type: string
          format: date
        locked:
          type: boolean
        state:
          type: string
          enum:
            - NOT_LOADED
            - INITIALIZING
            - DOWNLOADING
            - PARSING_JSON
            - PARSING_INFRA
            - ADAPTING_KOTLIN
            - LOADING_SIGNALS
            - BUILDING_BLOCKS
            - CACHED
            - TRANSIENT_ERROR
            - ERROR
      required:
        [
          id,
          name,
          version,
          railjson_version,
          generated_version,
          created,
          modified,
          locked,
          state,
        ]

    RailjsonFile:
      properties:
        version:
          type: string
        operational_points:
          type: array
        routes:
          type: array
        switch_types:
          type: array
        switches:
          type: array
        track_sections:
          type: array
        signals:
          type: array
        buffer_stops:
          type: array
        speed_sections:
          type: array
        electrifications:
          type: array
        detectors:
          type: array

    RailjsonObject:
      required:
        - obj_type
        - railjson
      properties:
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        railjson:
          $ref: "#/components/schemas/Railjson"

    DeleteOperation:
      required:
        - operation_type
        - obj_type
        - obj_id
      properties:
        operation_type:
          type: string
          enum:
            - DELETE
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        obj_id:
          type: string
          example: bd840b06-84ba-4566-98c1-ccf0196c5f16

    UpdateOperation:
      required:
        - operation_type
        - obj_type
        - railjson_patch
      properties:
        operation_type:
          type: string
          enum:
            - UPDATE
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        obj_id:
          type: string
          example: bd840b06-84ba-4566-98c1-ccf0196c5f16
        railjson_patch:
          $ref: "#/components/schemas/Patches"

    Patch:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.

    Patches:
      type: array
      description: A list of Patch
      items:
        $ref: "#/components/schemas/Patch"

    Railjson:
      type: object
      description: This field follows railjson format
      additionalProperties: true
      required:
        - id
      properties:
        id:
          type: string
      example:
        id: bd840b06-84ba-4566-98c1-ccf0196c5f16
        geo:
          type: LineString
          coordinates:
            - - 1.0
              - 41.0
            - - 2.0
              - 42.0
        sch:
          type: LineString
          coordinates:
            - - 1.0
              - 41.0
            - - 2.0
              - 42.0
        curves: []
        length: 1000
        slopes:
          - end: 500
            begin: 250
            gradient: -1
        line_code: 1
        line_name: my line
        track_name: track name
        navigability: BOTH
        track_number: 1

    Geometry:
      type: object
      description: Definition of a GeoJSON geometry
      oneOf:
        - $ref: "#/components/schemas/Point"
        - $ref: "#/components/schemas/LineString"
        - $ref: "#/components/schemas/Polygon"
        - $ref: "#/components/schemas/MultiPoint"
        - $ref: "#/components/schemas/MultiLineString"
        - $ref: "#/components/schemas/MultiPolygon"

    Point3D:
      type: array
      description: Point in 3D space
      minItems: 2
      maxItems: 3
      items:
        type: number

    Point:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: "#/components/schemas/Point3D"

    LineString:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Point3D"

    Polygon:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/Point3D"

    MultiPoint:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Point3D"

    MultiLineString:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/Point3D"

    MultiPolygon:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: "#/components/schemas/Point3D"

    SimulationReportByTrain:
      properties:
        speeds:
          type: array
          minItems: 1
          items:
            allOf:
              - $ref: "#/components/schemas/SpaceTimePosition"
              - type: object
                properties:
                  speed:
                    type: number
                    format: float
                required: [speed]
        head_positions:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/SpaceTimePosition"
        tail_positions:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/SpaceTimePosition"
        stops:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Can be null if it's not an operational point
                nullable: true
              name:
                type: string
                description: Can be 'Unknown' if it's not an operational point
              time: { type: number, format: float }
              position: { type: number, format: float }
              duration: { type: number, format: float }
              line_code: { type: number }
              track_number: { type: number }
              line_name: { type: string }
              track_name: { type: string }
            required:
              [
                id,
                name,
                time,
                position,
                duration,
                line_code,
                track_number,
                line_name,
                track_name,
              ]
        route_aspects:
          type: array
          items:
            type: object
            properties:
              signal_id:
                type: string
                description: id of the updated signal
              route_id:
                type: string
                description: id of the affected route on the train path
              time_start:
                type: number
                format: float
                description: the aspect starts being displayed at this time
              time_end:
                type: number
                format: float
                description: the aspect stops being displayed at this time
              position_start:
                type: number
                format: float
                description: the route starts at this position on the train path
              position_end:
                type: number
                format: float
                description: the route ends at this position on the train path
              color:
                type: number
                format: float
                description: color of the aspect (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are blue)
              blinking:
                type: boolean
                description: true if the signal is blinking
              aspect_label:
                type: string
                description: label of the new signal aspect
            required:
              - signal_id
              - route_id
              - time_start
              - time_end
              - position_start
              - position_end
              - color
              - blinking
              - aspect_label
        signals:
          type: array
          items:
            type: object
            properties:
              signal_id: { type: integer }
              aspects:
                type: array
                items:
                  type: string
              geo_position:
                type: array
                items: { type: number, format: float }
                minItems: 2
                maxItems: 2
              schema_position:
                type: array
                items: { type: number, format: float }
                minItems: 2
                maxItems: 2
            required: [signal_id, aspects, geo_position, schema_position]
        mechanical_energy_consumed:
          type: number
          format: float
      required:
        - speeds
        - head_positions
        - tail_positions
        - stops
        - route_aspects
        - signals
        - mechanical_energy_consumed

    SpaceTimePosition:
      type: object
      properties:
        time: { type: number, format: float }
        position: { type: number, format: float }
      required: [time, position, speed]

    PowerRestrictionRangeItem:
      properties:
        start:
          type: number
          format: double
        stop:
          type: number
          format: double
        code:
          type: string
        handled:
          type: boolean
      required: [start, stop, code, handled]

    SingleSimulationRequest:
      type: object
      required: [rolling_stock_id, path_id]
      properties:
        rolling_stock_id:
          type: integer
        path_id:
          type: integer
        electrical_profile_set_id:
          type: integer
        initial_speed:
          type: number
          format: float
          default: 0
        scheduled_points:
          default: []
          type: array
          items:
            type: object
            required: [path_offset, time]
            properties:
              path_offset:
                type: number
                format: float
                description: Offset in meters from the start of the path at which the train must be.
              time:
                type: number
                format: float
                description: Time in seconds (elapsed since the train's departure) at which the train must be.
        allowances:
          default: []
          type: array
          items:
            $ref: "#/components/schemas/Allowance"
        stops:
          default: []
          type: array
          items:
            type: object
            properties:
              position:
                type: number
                format: float
              location:
                $ref: "#/components/schemas/TrackLocation"
              duration:
                type: number
                format: float
        tag:
          type: string
        comfort:
          $ref: "#/components/schemas/Comfort"
        power_restriction_ranges:
          description: A list of ranges along the train path where power restrictions apply.
          type: array
          items:
            $ref: "#/components/schemas/RjsPowerRestrictionRange"
          nullable: true
        options:
          allOf:
            - $ref: "#/components/schemas/TrainScheduleOptions"
          nullable: true

    SingleSimulationResponse:
      type: object
      required:
        [
          base_simulation,
          eco_simulation,
          speed_limits,
          warnings,
          electrification_ranges,
          power_restriction_ranges,
        ]
      properties:
        base_simulation:
          $ref: "#/components/schemas/SimulationReportByTrain"
        eco_simulation:
          allOf:
            - $ref: "#/components/schemas/SimulationReportByTrain"
          nullable: true
        speed_limits:
          type: array
          minItems: 2
          items:
            type: object
            properties:
              position: { type: number }
              speed: { type: number }
            required: [position, speed]
        warnings:
          type: array
          items:
            type: string
        electrification_ranges:
          description: A list of ranges which should be contiguous and which describe the electrification on the path and if it is handled by the train
          type: array
          items:
            $ref: "#/components/schemas/ElectrificationRange"
          minItems: 1
        power_restriction_ranges:
          description: The list of ranges where power restrictions are applied
          type: array
          items:
            $ref: "#/components/schemas/PowerRestrictionRangeItem"
