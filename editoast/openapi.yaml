openapi: 3.0.2
info:
  title: OSRD Editoast
  description: OSRD Edition service description
  version: 0.1.0

tags:
  - name: infra
    description: Infra

paths:
  /health/:
    get:
      responses:
        200:
          description: Check if Editoast is running correctly

  /version/:
    get:
      responses:
        200:
          description: Return the service version
          content:
            application/json:
              schema:
                type: object
                properties:
                  git_describe:
                    type: string
                    nullable: true
                required:
                  - git_describe

  /layers/info/:
    get:
      summary: Get layers descriptions
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/Layer"

  /infra/:
    get:
      tags:
        - infra
      summary: List all available infra
      responses:
        200:
          description: The infra list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Infra"
    post:
      tags:
        - infra
      summary: Create an infra
      requestBody:
        description: Name of the infra to create
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: The created infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"

  /infra/{id}/:
    get:
      tags:
        - infra
      summary: Retrieve a specific infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: Information about the retrieved infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"
    delete:
      tags:
        - infra
      summary: Delete an infra and all entities linked to it
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

    post:
      tags:
        - infra
      summary: Update/Create/Delete an object of the infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      requestBody:
        description: Operations to do on the infra
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Operation"
      responses:
        200:
          description: An array containing infos about the operations processed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OperationResult"

    put:
      tags:
        - infra
      summary: Update an infrastructure name
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      requestBody:
        description: the name we want to give to the infra
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: The updated infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"

  /infra/{id}/railjson/:
    get:
      tags:
        - infra
      summary: Serialize an infra to railjson
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: query
          name: exclude_extensions
          schema:
            type: boolean
            default: false
          description: Whether the railjson should contain extensions
      responses:
        200:
          description: The infra in railjson format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RailjsonFile"

  /infra/railjson/:
    post:
      tags:
        - infra
      summary: Import an infra from railjson
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Infra name
          required: true
        - in: query
          name: generate_data
          schema:
            type: boolean
            description: whether the layer should be generated or no
            default: false
      requestBody:
        description: Railjson infra
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RailjsonFile"
        required: true
      responses:
        201:
          description: The imported infra id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }

  /infra/{id}/errors/:
    get:
      tags:
        - infra
      summary: Retrieve a paginated list of errors
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number
        - in: query
          name: page_size
          schema:
            type: integer
            default: 25
            minimum: 10
          description: The number of item per page
        - in: query
          name: error_type
          schema:
            type: string
            enum:
              - invalid_reference
              - out_of_range
              - empty_path
              - path_does_not_match_endpoints
              - unknown_port_name
              - invalid_switch_ports
              - empty_object
              - object_out_of_path
              - missing_route
              - unused_port
              - duplicated_group
              - no_buffer_stop
              - path_is_not_continuous
              - overlapping_switches
              - overlapping_track_links
          description: The type of error to filter on
        - in: query
          name: object_id
          schema:
            type: string
          description: errors and warnings that only part of a given object
        - in: query
          name: level
          schema:
            type: string
            enum: [errors, warnings, all]
            default: all
          description: Whether the response should include errors or warnings
      responses:
        200:
          description: A paginated list of errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of elements
                    example: 1
                  next:
                    type: integer
                    nullable: true
                    example: null
                    description: The index of the following page (null if no more pages available)
                  previous:
                    type: integer
                    nullable: true
                    example: null
                    description: The index of the previous page (null if requesting the first page)
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/InfraError"

  /infra/{id}/switch_types/:
    get:
      tags:
        - infra
      summary: Retrieve a list of switch types
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: A list of switch types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: A switch type following Railjson spec
                  example:
                    id: Point
                    ports: [LEFT, RIGHT, BASE]
                    groups:
                      LEFT: { src: BASE, dst: LEFT }
                      RIGHT: { src: BASE, dst: RIGHT }

  /infra/refresh/:
    post:
      tags:
        - infra
      summary: Refresh the layers
      parameters:
        - in: query
          name: infras
          schema:
            type: array
            items:
              type: integer
            default: []
          description: A list of infra ID
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Force the refresh of the layers
      responses:
        200:
          description: A list thats contains the ID of the infras that were refreshed*
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer

  /infra/{id}/lock/:
    post:
      tags:
        - infra
      summary: Lock an infra from edition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

  /infra/{id}/unlock/:
    post:
      tags:
        - infra
      summary: Unlock an infra from edition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

  /infra/{id}/speed_limit_tags/:
    get:
      tags:
        - infra
      summary: List all speed limit tags
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
      responses:
        200:
          description: Tags list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["freight", "heavy_load"]

  /infra/{id}/voltages/:
    get:
      tags:
        - infra
      summary: List all voltages
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
      responses:
        200:
          description: Voltages list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  format: float
                example: [750.0, 1500.0, 2500.50]

  /infra/{id}/routes/{waypoint_type}/{waypoint_id}/:
    get:
      tags:
        - infra
        - routes
      summary: Retrieve all routes that starting and ending by the given waypoint (detector or buffer stop)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: path
          name: waypoint_type
          schema:
            type: string
            enum: [Detector, BufferStop]
          description:  Type of the waypoint
          required: true
        - in: path
          name: waypoint_id
          schema:
            type: string
          description:  The waypoint id
          required: true
      responses:
        200:
          description: All routes that starting and ending by the given waypoint
          content:
            application/json:
              schema:
                type: object
                properties:
                  starting:
                    type: array
                    items:
                      type: string
                    example: ["route1", "route2"]
                  ending:
                    type: array
                    items:
                      type: string
                    example: ["route3", "route4"]

  /infra/{id}/routes/track_ranges/:
    get:
      tags:
        - infra
        - routes
      summary: Compute the track ranges through which routes passes.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: query
          name: routes
          schema:
            type: string
            description: A list of routes seperated by comma
            example: "route1,route2,route3"
          required: true
      responses:
        200:
          description: Foreach route, the track ranges through which it passes or an error
          content:
            application/json:
              schema:
                type: array
                items:
                  discriminator:
                    propertyName: type
                  oneOf:
                    - $ref: "#/components/schemas/ComputeTrackRangesNotFoundError"
                    - $ref: "#/components/schemas/ComputeTrackRangesCantComputePathError"
                    - $ref: "#/components/schemas/TrackRanges"

  /infra/{id}/objects/{object_type}/:
    post:
      tags:
        - infra
      summary: "Retrieve a list of specific objects in railjson format"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
        - in: path
          name: object_type
          schema:
            $ref: "#/components/schemas/ObjectType"
          description: The type of the object
          required: true
      requestBody:
        description: List of object id's
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: No content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    railjson:
                      type: object
                      description: Object properties in railjson format
                    geographic:
                      type: object
                      description: object's geographic in geojson format
                    schematic:
                      type: object
                      description: object's schematic in geojson format

components:
  schemas:
    Infra:
      properties:
        id:
          type: integer
        name:
          type: string
        version:
          type: string
          example: "1"
        generated_version:
          type: string
          nullable: true
          example: "1"
        created:
          type: string
          format: date
        modified:
          type: string
          format: date
        locked:
          type: boolean

    Layer:
      properties:
        name:
          type: string
        table_name:
          type: string
        views:
          type: array
          items:
            $ref: "#/components/schemas/MapLayerView"
        id_field:
          type: string
        attribution:
          type: string

    MapLayerView:
      properties:
        name:
          type: string
        on_field:
          type: string
        data_expr:
          type: array
          items:
            type: string
        exclude_fields:
          type: array
          items:
            type: string
        joins:
          type: array
          items:
            type: string
        cache_duration:
          type: integer
        where:
          type: array
          items:
            type: string

    ObjectType:
      type: string
      description: Type of the object
      enum:
        - TrackSection
        - Signal
        - SpeedSection
        - Detector
        - TrackSectionLink
        - Switch
        - SwitchType
        - BufferStop
        - Route
        - OperationalPoint
        - Catenary

    RailjsonFile:
      properties:
        version:
          type: string
        operational_points:
          type: array
        routes:
          type: array
        switch_types:
          type: array
        switches:
          type: array
        track_section_links:
          type: array
        track_sections:
          type: array
        signals:
          type: array
        buffer_stops:
          type: array
        speed_sections:
          type: array
        catenaries:
          type: array
        detectors:
          type: array

    Operation:
      oneOf:
        - $ref: "#/components/schemas/RailjsonObject"
        - $ref: "#/components/schemas/DeleteOperation"
        - $ref: "#/components/schemas/UpdateOperation"
      discriminator:
        propertyName: operation_type

    OperationResult:
      oneOf:
        - $ref: "#/components/schemas/DeleteOperation"
        - $ref: "#/components/schemas/OperationObject"
      discriminator:
        propertyName: operation_type

    RailjsonObject:
      properties:
        operation_type:
          type: string
          enum: ["CREATE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        railjson:
          $ref: "#/components/schemas/Railjson"

    DeleteOperation:
      properties:
        operation_type:
          type: string
          enum: ["DELETE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        obj_id:
          type: string
          example: bd840b06-84ba-4566-98c1-ccf0196c5f16

    UpdateOperation:
      properties:
        operation_type:
          type: string
          enum: ["UPDATE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        obj_id:
          type: string
          example: bd840b06-84ba-4566-98c1-ccf0196c5f16
        railjson_patch:
          $ref: "#/components/schemas/Patches"

    OperationObject:
      properties:
        operation_type:
          type: string
          enum: ["CREATE", "UPDATE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        railjson:
          $ref: "#/components/schemas/Railjson"

    Patch:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.

    Patches:
      type: array
      description: A list of Patch
      items:
        $ref: "#/components/schemas/Patch"

    Railjson:
      type: object
      description: This field follows railjson format
      example:
        id: bd840b06-84ba-4566-98c1-ccf0196c5f16
        geo:
          type: LineString
          coordinates:
            - - 1.0
              - 41.0
            - - 2.0
              - 42.0
        sch:
          type: LineString
          coordinates:
            - - 1.0
              - 41.0
            - - 2.0
              - 42.0
        curves: []
        length: 1000
        slopes:
          - end: 500
            begin: 250
            gradient: -1
        line_code: 1
        line_name: my line
        track_name: track name
        navigability: BOTH
        track_number: 1

    InfraError:
      type: object
      description: An infra error or warning
      properties:
        geographic:
          nullable: true
          type: object
          description: Geojson of the geographic geometry of the error
        schematic:
          nullable: true
          type: object
          description: Geojson of the schematic geometry of the error
        information:
          type: object
          description: Information about the error (check schema documentation for more details)
          example:
            error_type: invalid_reference
            field: track
            is_warning: false
            obj_id: 61205924-6667-11e3-81ff-01f464e0362d
            obj_type: TrackSection

    TrackRanges:
      type: object
      description: Track ranges
      properties:
        type: { type: string, enum: ["Computed"] }
        track_ranges:
          type: array
          items:
            type: object
            properties:
              track:
                type: string
                example: 01234567-89ab-cdef-0123-456789abcdef
              begin:
                type: number
                format: float
              end:
                type: number
                format: float
                example: 100.
              applicable_directions:
                type: string
                enum: [START_TO_STOP, STOP_TO_START]
                
    ComputeTrackRangesNotFoundError:
      type: object
      description: Error when the route id couldn't be found
      properties:
        type: { type: string, enum: ["NotFound"] }

    ComputeTrackRangesCantComputePathError:
      type: object
      description: Error when the route path couldn't be computed
      properties:
        type: { type: string, enum: ["CantComputePath"] }

