openapi: 3.0.2
info:
  title: OSRD Editoast
  description: OSRD Edition service description
  version: 0.1.0

tags:
  - name: infra
    description: Infra
  - name: routes
    description: Operations related to infra routes
  - name: pathfinding
    description: Pathfinding operations
  - name: layers
    description: Map layers
  - name: electrical_profiles
    description: Electrical profiles

paths:
  /health/:
    get:
      responses:
        200:
          description: Check if Editoast is running correctly

  /version/:
    get:
      responses:
        200:
          description: Return the service version
          content:
            application/json:
              schema:
                type: object
                properties:
                  git_describe:
                    type: string
                    nullable: true
                required:
                  - git_describe

  /search/:
    post:
      summary: Generic search endpoint
      requestBody:
        description: Search query
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                object:
                  type: string
                  example: "operationalpoint"
                query:
                  $ref: "#/components/schemas/SearchQuery"
                page:
                  type: integer
                  default: 1
                page_size:
                  type: integer
                  default: 25
      responses:
        200:
          description: Search results, the structure of the returned objects depend on their type
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /layers/layer/{layer_slug}/mvt/{view_slug}/:
    get:
      tags:
        - layers
      summary: Mvt View Metadata
      parameters:
        - required: true
          schema:
            title: Layer Slug
            type: string
          name: layer_slug
          in: path
        - required: true
          schema:
            title: View Slug
            type: string
          name: view_slug
          in: path
        - required: true
          schema:
            title: Infra id
            type: integer
          name: infra
          in: query
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewMetadata"

  /layers/tile/{layer_slug}/{view_slug}/{z}/{x}/{y}/:
    get:
      tags:
        - layers
      summary: Mvt tile from the cache or the database, cache data in redis if needed
      parameters:
        - required: true
          schema:
            title: Layer Slug
            type: string
          name: layer_slug
          in: path
        - required: true
          schema:
            title: View Slug
            type: string
          name: view_slug
          in: path
        - required: true
          schema:
            title: Z
            type: integer
          name: z
          in: path
        - required: true
          schema:
            title: X
            type: integer
          name: x
          in: path
        - required: true
          schema:
            title: Y
            type: integer
          name: y
          in: path
        - required: true
          schema:
            title: Infra
            type: integer
          name: infra
          in: query
      responses:
        200:
          description: Successful Response
          content:
            application/x-octet-stream:
              schema:
                type: string

  /infra/:
    get:
      tags:
        - infra
      summary: List all available infra
      responses:
        200:
          description: The infra list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Infra"
    post:
      tags:
        - infra
      summary: Create an infra
      requestBody:
        description: Name of the infra to create
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: The created infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"

  /infra/{id}/:
    get:
      tags:
        - infra
      summary: Retrieve a specific infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: Information about the retrieved infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"
    delete:
      tags:
        - infra
      summary: Delete an infra and all entities linked to it
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

    post:
      tags:
        - infra
      summary: Update/Create/Delete an object of the infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      requestBody:
        description: Operations to do on the infra
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Operation"
      responses:
        200:
          description: An array containing infos about the operations processed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OperationResult"

    put:
      tags:
        - infra
      summary: Update an infrastructure name
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      requestBody:
        description: the name we want to give to the infra
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: The updated infra
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Infra"

  /infra/{id}/railjson/:
    get:
      tags:
        - infra
      summary: Serialize an infra to railjson
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: query
          name: exclude_extensions
          schema:
            type: boolean
            default: false
          description: Whether the railjson should contain extensions
      responses:
        200:
          description: The infra in railjson format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RailjsonFile"

  /infra/railjson/:
    post:
      tags:
        - infra
      summary: Import an infra from railjson
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Infra name
          required: true
        - in: query
          name: generate_data
          schema:
            type: boolean
            description: whether the layer should be generated or no
            default: false
      requestBody:
        description: Railjson infra
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RailjsonFile"
        required: true
      responses:
        201:
          description: The imported infra id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }

  /infra/{id}/errors/:
    get:
      tags:
        - infra
      summary: Retrieve a paginated list of errors
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number
        - in: query
          name: page_size
          schema:
            type: integer
            default: 25
            minimum: 10
          description: The number of item per page
        - in: query
          name: error_type
          schema:
            type: string
            enum:
              - invalid_reference
              - out_of_range
              - empty_path
              - path_does_not_match_endpoints
              - unknown_port_name
              - invalid_switch_ports
              - empty_object
              - object_out_of_path
              - missing_route
              - unused_port
              - duplicated_group
              - no_buffer_stop
              - path_is_not_continuous
              - overlapping_switches
              - overlapping_track_links
          description: The type of error to filter on
        - in: query
          name: object_id
          schema:
            type: string
          description: errors and warnings that only part of a given object
        - in: query
          name: level
          schema:
            type: string
            enum: [errors, warnings, all]
            default: all
          description: Whether the response should include errors or warnings
      responses:
        200:
          description: A paginated list of errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of elements
                    example: 1
                  next:
                    type: integer
                    nullable: true
                    example: null
                    description: The index of the following page (null if no more pages available)
                  previous:
                    type: integer
                    nullable: true
                    example: null
                    description: The index of the previous page (null if requesting the first page)
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/InfraError"

  /infra/{id}/switch_types/:
    get:
      tags:
        - infra
      summary: Retrieve a list of switch types
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        200:
          description: A list of switch types
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: A switch type following Railjson spec
                  example:
                    id: Point
                    ports: [LEFT, RIGHT, BASE]
                    groups:
                      LEFT: { src: BASE, dst: LEFT }
                      RIGHT: { src: BASE, dst: RIGHT }

  /infra/refresh/:
    post:
      tags:
        - infra
      summary: Refresh the layers
      parameters:
        - in: query
          name: infras
          schema:
            type: array
            items:
              type: integer
            default: []
          description: A list of infra ID
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Force the refresh of the layers
      responses:
        200:
          description: A list thats contains the ID of the infras that were refreshed*
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer

  /infra/{id}/lock/:
    post:
      tags:
        - infra
      summary: Lock an infra from edition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

  /infra/{id}/unlock/:
    post:
      tags:
        - infra
      summary: Unlock an infra from edition
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: infra id
          required: true
      responses:
        204:
          description: No content

  /infra/{id}/speed_limit_tags/:
    get:
      tags:
        - infra
      summary: List all speed limit tags
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
      responses:
        200:
          description: Tags list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["freight", "heavy_load"]

  /infra/{id}/voltages/:
    get:
      tags:
        - infra
      summary: List all voltages
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
      responses:
        200:
          description: Voltages list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
                  format: float
                example: [750.0, 1500.0, 2500.50]

  /infra/{id}/attached/{track_id}/:
    get:
      tags:
        - infra
      summary: Retrieve all objects attached to a given track
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: path
          name: track_id
          schema:
            type: string
          description: Track ID
          required: true
      responses:
        200:
          description: All objects attached to the given track (arranged by types)
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                    description: Object IDs
                example:
                  Switch: ["switch.0", "switch.1"]
                  Detector: ["detector.0"]
                  BufferStop: []

  /infra/{id}/routes/{waypoint_type}/{waypoint_id}/:
    get:
      tags:
        - infra
        - routes
      summary: Retrieve all routes that starting and ending by the given waypoint (detector or buffer stop)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: path
          name: waypoint_type
          schema:
            type: string
            enum: [Detector, BufferStop]
          description: Type of the waypoint
          required: true
        - in: path
          name: waypoint_id
          schema:
            type: string
          description: The waypoint id
          required: true
      responses:
        200:
          description: All routes that starting and ending by the given waypoint
          content:
            application/json:
              schema:
                type: object
                properties:
                  starting:
                    type: array
                    items:
                      type: string
                    example: ["route1", "route2"]
                  ending:
                    type: array
                    items:
                      type: string
                    example: ["route3", "route4"]

  /infra/{id}/routes/track_ranges/:
    get:
      tags:
        - infra
        - routes
      summary: Compute the track ranges through which routes passes.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: query
          name: routes
          schema:
            type: string
            description: A list of routes seperated by comma
            example: "route1,route2,route3"
          required: true
      responses:
        200:
          description: Foreach route, the track ranges through which it passes or an error
          content:
            application/json:
              schema:
                type: array
                items:
                  discriminator:
                    propertyName: type
                  oneOf:
                    - $ref: "#/components/schemas/RouteTrackRangesNotFoundError"
                    - $ref: "#/components/schemas/RouteTrackRangesCantComputePathError"
                    - $ref: "#/components/schemas/RouteTrackRangesComputed"

  /infra/{id}/pathfinding/:
    post:
      tags:
        - infra
        - pathfinding
      summary: Compute paths given starting and ending track location. Return shortest paths.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra ID
          required: true
        - in: query
          name: number
          schema:
            type: number
            format: integer
            minimum: 1
            maximum: 5
            default: 5
          description: Maximum number of paths to return
      requestBody:
        description: Starting and ending track location
        content:
          application/json:
            schema:
              type: object
              properties:
                starting:
                  allOf:
                    - $ref: "#/components/schemas/TrackLocation"
                    - type: object
                      properties:
                        direction:
                          $ref: "#/components/schemas/Direction"
                ending:
                  $ref: "#/components/schemas/TrackLocation"
      responses:
        200:
          description: Paths, containing track ranges, detectors and switches with their directions. If no path is found, an empty list is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    track_ranges:
                      type: array
                      minItems: 1
                      items:
                        $ref: "#/components/schemas/DirectionalTrackRange"
                    detectors:
                      type: array
                      items:
                        type: string
                        example: "detector1"
                    switches_directions:
                      type: object
                      example: { "switch1": "left", "switch2": "right" }
                      additionalProperties:
                        type: string

  /infra/{id}/objects/{object_type}/:
    post:
      tags:
        - infra
      summary: "Retrieve a list of specific objects in railjson format"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
        - in: path
          name: object_type
          schema:
            $ref: "#/components/schemas/ObjectType"
          description: The type of the object
          required: true
      requestBody:
        description: List of object id's
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: No content
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    railjson:
                      type: object
                      description: Object properties in railjson format
                    geographic:
                      type: object
                      description: object's geographic in geojson format
                    schematic:
                      type: object
                      description: object's schematic in geojson format
  /infra/{id}/clone/:
    post:
      tags:
        - infra
      summary: Duplicate an infra
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Infra id
          required: true
      responses:
        201:
          description: The duplicated infra id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: integer }

  /electrical_profile_set/:
    get:
      tags:
        - electrical_profiles
      summary: Retrieve the list of ids and names of electrical profile sets available
      responses:
        200:
          description: The list of ids and names of electrical profile sets available
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                      example: "France 2023"

  /electrical_profile_set:
    post:
      tags:
        - electrical_profiles
      summary: import a new electrical profile set
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: The list of ids and names of electrical profile sets available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElectricalProfile"

  /electrical_profile_set/{id}/:
    get:
      tags:
        - electrical_profiles
      summary: Retrieve the set of electrical profiles with the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Electrical profile set ID
          required: true
      responses:
        200:
          description: The list of electrical profiles in the set
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ElectricalProfile"

  /electrical_profile_set/{id}/level_order/:
    get:
      tags:
        - electrical_profiles
      summary: Retrieve the order of strength of the electrical profiles in the set with the given id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Electrical profile set ID
          required: true
      responses:
        200:
          description: A dictionary mapping catenary modes to a list of electrical profiles ordered by decreasing strength
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                example:
                  "1500": ["A", "B", "C"]
                  "25000": ["25000", "22500", "20000"]

  /documents/{key}/:
    get:
      tags:
        - documents
      summary: Retrieve a document binary content
      parameters:
        - in: path
          name: key
          schema:
            type: integer
          description: A key identifying the document
          required: true
      responses:
        200:
          description: A document of any type (can be an image, a pdf...)
    delete:
      tags:
        - documents
      summary: Delete a document
      parameters:
        - in: path
          name: key
          schema:
            type: integer
          description: A key identifying the document
          required: true
      responses:
        204:
          description: No content

  /documents/:
    post:
      tags:
        - documents
      summary: Add a document
      responses:
        201:
          description: The key of the added document
          content:
            application/json:
              schema:
                type: object
                properties:
                  document_key:
                    type: integer
                    example: 42

  /rolling_stock/{id}/:
    get:
      tags:
        - rolling_stock
      summary: Retrieve a rolling stock
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Rolling Stock ID
          required: true
      responses:
        200:
          description: The rolling stock information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RollingStock"

  /projects/:
    post:
      tags:
        - projects
      summary: Create a new project
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreateRequest"
      responses:
        201:
          description: The created project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResult"
    get:
      tags:
        - projects
      summary: Paginated list of projects
      parameters:
        - in: query
          name: ordering
          schema:
            type: string
            enum:
              [
                "name",
                "-name",
                "creation_date",
                "-creation_date",
                "last_modification",
                "-last_modification",
              ]
        - in: query
          name: name
          schema:
            type: string
          description: Filter projects by name
        - in: query
          name: description
          schema:
            type: string
          description: Filter projects by description
        - in: query
          name: tags
          schema:
            type: string
          description: Filter projects by tags
        - in: query
          name: page
          schema:
            type: integer
            minimum: 0
          description: Page number
        - in: query
          name: page_size
          schema:
            type: integer
            maximum: 10000
            minimum: 1
            default: 100
          description: Number of elements by page
      responses:
        200:
          description: the project list
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  next: {}
                  previous: {}
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        schema:
                          $ref: "#/components/schemas/ProjectResult"

  /projects/{project_id}/:
    get:
      tags:
        - projects
      summary: Retrieve a project
      parameters:
        - in: path
          name: project_id
          schema:
            type: integer
          description: project id you want to retrieve
          required: true
      responses:
        200:
          description: The project info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResult"
    patch:
      tags:
        - projects
      summary: Update a project
      parameters:
        - in: path
          name: project_id
          schema:
            type: integer
          description: project id you want to update
          required: true
      requestBody:
        description: The fields you want to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectPatchRequest"
      responses:
        200:
          description: The project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResult"
    delete:
      tags:
        - projects
      summary: delete a project
      parameters:
        - in: path
          name: project_id
          schema:
            type: integer
          description: project id you want to delete
          required: true
      responses:
        204:
          description: No content

components:
  schemas:
    Comfort:
      description: Train comfort that will be used for the simulation
      type: string
      enum: ["AC", "HEATING", "STANDARD"]
      default: "STANDARD"

    ConditionalEffortCurve:
      type: object
      properties:
        cond:
          type: object
          nullable: true
          properties:
            comfort:
              $ref: "#/components/schemas/Comfort"
              nullable: true
            electrical_profile_level:
              type: string
              nullable: true
            power_restriction_code:
              type: string
              nullable: true
        curve:
          $ref: "#/components/schemas/EffortCurve"

    EffortCurve:
      type: object
      properties:
        speeds:
          type: array
          example: [0.0, 2.958, 46.719]
          minItems: 2
          items:
            type: number
            format: float
        max_efforts:
          type: array
          example: [23500.0, 23200.0, 21200.0]
          minItems: 2
          items:
            type: number
            format: float

    Infra:
      properties:
        id:
          type: integer
        name:
          type: string
        version:
          type: string
          example: "1"
        generated_version:
          type: string
          nullable: true
          example: "1"
        created:
          type: string
          format: date
        modified:
          type: string
          format: date
        locked:
          type: boolean

    ObjectType:
      type: string
      description: Type of the object
      enum:
        - TrackSection
        - Signal
        - SpeedSection
        - Detector
        - TrackSectionLink
        - Switch
        - SwitchType
        - BufferStop
        - Route
        - OperationalPoint
        - Catenary

    RailjsonFile:
      properties:
        version:
          type: string
        operational_points:
          type: array
        routes:
          type: array
        switch_types:
          type: array
        switches:
          type: array
        track_section_links:
          type: array
        track_sections:
          type: array
        signals:
          type: array
        buffer_stops:
          type: array
        speed_sections:
          type: array
        catenaries:
          type: array
        detectors:
          type: array

    Operation:
      oneOf:
        - $ref: "#/components/schemas/RailjsonObject"
        - $ref: "#/components/schemas/DeleteOperation"
        - $ref: "#/components/schemas/UpdateOperation"
      discriminator:
        propertyName: operation_type

    OperationResult:
      oneOf:
        - $ref: "#/components/schemas/DeleteOperation"
        - $ref: "#/components/schemas/OperationObject"
      discriminator:
        propertyName: operation_type

    RailjsonObject:
      properties:
        operation_type:
          type: string
          enum: ["CREATE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        railjson:
          $ref: "#/components/schemas/Railjson"

    DeleteOperation:
      properties:
        operation_type:
          type: string
          enum: ["DELETE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        obj_id:
          type: string
          example: bd840b06-84ba-4566-98c1-ccf0196c5f16

    UpdateOperation:
      properties:
        operation_type:
          type: string
          enum: ["UPDATE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        obj_id:
          type: string
          example: bd840b06-84ba-4566-98c1-ccf0196c5f16
        railjson_patch:
          $ref: "#/components/schemas/Patches"

    OperationObject:
      properties:
        operation_type:
          type: string
          enum: ["CREATE", "UPDATE"]
        obj_type:
          $ref: "#/components/schemas/ObjectType"
        railjson:
          $ref: "#/components/schemas/Railjson"

    Patch:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.

    Patches:
      type: array
      description: A list of Patch
      items:
        $ref: "#/components/schemas/Patch"

    Railjson:
      type: object
      description: This field follows railjson format
      example:
        id: bd840b06-84ba-4566-98c1-ccf0196c5f16
        geo:
          type: LineString
          coordinates:
            - - 1.0
              - 41.0
            - - 2.0
              - 42.0
        sch:
          type: LineString
          coordinates:
            - - 1.0
              - 41.0
            - - 2.0
              - 42.0
        curves: []
        length: 1000
        slopes:
          - end: 500
            begin: 250
            gradient: -1
        line_code: 1
        line_name: my line
        track_name: track name
        navigability: BOTH
        track_number: 1

    ViewMetadata:
      properties:
        type:
          type: string
          example: vector
        name:
          type: string
          example: track_sections
        promotedId:
          type: object
          example: { track_sections: "id" }
        scheme:
          type: string
          example: "xyz"
        tiles:
          type: array
          items:
            type: string
            example: http://localhost:7070/tile/track_sections/geo/{z}/{x}/{y}/?infra=1
        attribution:
          type: string
        minzoom:
          type: integer
        maxzoom:
          type: integer
          example: 18

    InfraError:
      type: object
      description: An infra error or warning
      required: [information]
      properties:
        geographic:
          nullable: true
          description: Geojson of the geographic geometry of the error
          $ref: "#/components/schemas/Geometry"
        schematic:
          nullable: true
          type: object
          description: Geojson of the schematic geometry of the error
        information:
          type: object
          description: Information about the error (check schema documentation for more details)
          required: [obj_id, obj_type, error_type, is_warning]
          properties:
            obj_id:
              type: string
            obj_type:
              type: string
              enum:
                - TrackSection
                - Signal
                - BufferStop
                - Detector
                - Switch
                - Route
            error_type:
              type: string
              enum:
                - invalid_reference
                - out_of_range
                - empty_path
                - path_does_not_match_endpoints
                - unknown_port_name
                - invalid_switch_ports
                - empty_object
                - object_out_of_path
                - missing_route
                - unused_port
                - duplicated_group
                - no_buffer_stop
                - path_is_not_continuous
                - overlapping_switches
                - overlapping_track_links
            field:
              type: string
            is_warning:
              type: boolean

    TrackLocation:
      type: object
      description: A track location (track section and offset)
      properties:
        track:
          type: string
          description: The track section ID
          example: 61205924-6667-11e3-81ff-01f464e0362d
        offset:
          type: number
          format: float
          description: The offset on the track section
          example: 42.

    Direction:
      type: string
      enum: [START_TO_STOP, STOP_TO_START]

    TrackRange:
      type: object
      description: Track range
      properties:
        track:
          type: string
          example: 01234567-89ab-cdef-0123-456789abcdef
        begin:
          type: number
          format: float
        end:
          type: number
          format: float
          example: 100

    DirectionalTrackRange:
      type: object
      description: Track range associated with a direction
      properties:
        track:
          type: string
          example: 01234567-89ab-cdef-0123-456789abcdef
        begin:
          type: number
          format: float
        end:
          type: number
          format: float
          example: 100.
        direction:
          $ref: "#/components/schemas/Direction"

    LightRollingStock:
      properties:
        id:
          type: number
        version:
          type: string
          example: "3.0"
        name:
          type: string
        length:
          type: number
          format: float
        max_speed:
          type: number
          format: float
        startup_time:
          type: number
          format: float
        startup_acceleration:
          type: number
          format: float
        comfort_acceleration:
          type: number
          format: float
        gamma:
          type: object
          properties:
            type:
              type: string
              enum: ["CONST", "MAX"]
            value:
              type: number
              format: float
        inertia_coefficient:
          type: number
          format: float
        features:
          type: array
          items:
            type: string
        mass:
          type: number
          format: float
        rolling_resistance:
          type: object
          properties:
            A:
              type: number
            B:
              type: number
            C:
              type: number
            type:
              type: string
              enum: ["davis"]
        loading_gauge:
          type: string
          enum:
            - "G1"
            - "G2"
            - "GA"
            - "GB"
            - "GB1"
            - "GC"
            - "FR3.3"
            - "FR3.3/GB/G2"
            - "GLOTT"
        effort_curves:
          type: object
          properties:
            default_mode:
              type: string
            modes:
              type: object
              additionalProperties:
                type: object
                properties:
                  is_electric:
                    type: boolean
        base_power_class:
          type: string
          example: "5"
        power_restrictions:
          type: object
          description: Mapping of power restriction code to power class
          additionalProperties:
            type: string
          example:
            "C1US": "4"
            "C2US": "3"
        metadata:
          type: object
          example:
            detail: "BB 7200"
            family: "LOCOMOTIVES"
            grouping: "Locomotives électriques courant continu"
            number: "1"
            reference: "7200"
            series: "BB 7200"
            subseries: "GV"
            type: "Locomotives électriques"
            unit: "US"
        liveries:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              name:
                type: string

    RollingStock:
      allOf:
        - $ref: "#/components/schemas/LightRollingStock"
        - type: object
          properties:
            effort_curves:
              type: object
              properties:
                default_mode:
                  type: string
                modes:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      curves:
                        type: array
                        items:
                          $ref: "#/components/schemas/ConditionalEffortCurve"
                      default_curve:
                        $ref: "#/components/schemas/EffortCurve"
                      is_electric:
                        type: boolean

    RouteTrackRangesComputed:
      type: object
      description: Route track ranges successfully computed
      properties:
        type: { type: string, enum: ["Computed"] }
        track_ranges:
          type: array
          items:
            $ref: "#/components/schemas/DirectionalTrackRange"

    RouteTrackRangesNotFoundError:
      type: object
      description: Error when the route id couldn't be found
      properties:
        type: { type: string, enum: ["NotFound"] }

    RouteTrackRangesCantComputePathError:
      type: object
      description: Error when the route path couldn't be computed
      properties:
        type: { type: string, enum: ["CantComputePath"] }

    ElectricalProfile:
      type: object
      properties:
        value:
          type: string
          example: "A"
        power_class:
          type: string
          example: "1"
        track_ranges:
          type: array
          items:
            $ref: "#/components/schemas/TrackRange"

    SearchQuery:
      type: array
      minItems: 1
      nullable: true
      items:
        oneOf:
          - type: boolean
          - type: number
          - type: integer
          - type: string
          - $ref: "#/components/schemas/SearchQuery"
      example:
        [
          "and",
          [
            "or",
            ["search", ["name"], "mich st"],
            ["search", ["trigram"], null],
          ],
          ["=", ["infra_id"], 2],
        ]
    ProjectCreateRequest:
      properties:
        name:
          type: string
          maxLength: 128
        objectives:
          type: string
          maxLength: 4096
          default: ""
        description:
          type: string
          maxLength: 1024
          default: ""
        funders:
          type: string
          maxLength: 1024
          default: ""
        budget:
          type: integer
        image:
          type: integer
          description: The id of the image in the document table
        tags:
          type: array
          items:
            type: string
            maxLength: 255
      required:
        - name
    ProjectPatchRequest:
      properties:
        name:
          type: string
          maxLength: 128
        objectives:
          type: string
          maxLength: 4096
        description:
          type: string
          maxLength: 1024
        funders:
          type: string
          maxLength: 1024
        budget:
          type: integer
        image:
          type: integer
          description: The id of the image in the document table
        tags:
          type: array
          items:
            type: string
            maxLength: 255
    ProjectResult:
      properties:
        id:
          type: integer
        name:
          type: string
        objectives:
          type: string
        description:
          type: string
        funders:
          type: array
          items:
            type: string
        budget:
          type: integer
        image:
          type: integer
          description: the image id
        image_url:
          type: string
          description: the image url
          example: http://localhost:8090/documents/20/
        creation_date:
          type: string
          format: date-time
        last_modification:
          type: string
          format: date-time
        studies:
          type: array
          items:
            type: integer
        tags:
          type: array
          items:
            type: string

    Geometry:
      type: object
      description: Definition of a GeoJSON geometry
      oneOf:
        - $ref: "#/components/schemas/Point"
        - $ref: "#/components/schemas/LineString"
        - $ref: "#/components/schemas/Polygon"
        - $ref: "#/components/schemas/MultiPoint"
        - $ref: "#/components/schemas/MultiLineString"
        - $ref: "#/components/schemas/MultiPolygon"

    Point3D:
      type: array
      description: Point in 3D space
      minItems: 2
      maxItems: 3
      items:
        type: number

    Point:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: "#/components/schemas/Point3D"

    LineString:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Point3D"

    Polygon:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/Point3D"

    MultiPoint:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            $ref: "#/components/schemas/Point3D"

    MultiLineString:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/Point3D"

    MultiPolygon:
      type: object
      description: GeoJSon geometry
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: "#/components/schemas/Point3D"
