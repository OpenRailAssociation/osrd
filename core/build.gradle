// this project is licensed under LGPLv3.
// DO NOT ADD any dependency which isn't compatible with LGPLv3, such as:
//  - GPLv2, GPLv2+
//  - GPLv3, GPLv3+
//  - EPL 1.0
//
// The following licenses were checked for compatibility for use as libraries:
//  - Apache 2.0
//  - MIT
//  - BSD licenses
//  - EPL2.0 (see https://www.eclipse.org/legal/epl-2.0/faq.php#h.hsnsfg4e0htq)
//  - LGPLv2, LGPLv2+, LGPLv3
//  - GPLv2 with classpath exception
//  - CC Attribution

import static org.apache.tools.ant.taskdefs.condition.Os.*

plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.spotbugs' version '4.6.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'jacoco'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {
    // command line parsing
    implementation group: 'com.beust', name: 'jcommander', version: '1.78'  // Apache 2.0

    // fast primitive collections
    implementation group: 'com.carrotsearch', name: 'hppc', version: '0.9.0'  // Apache 2.0

    // XML parsing
    implementation group: 'org.dom4j', name: 'dom4j', version: '2.1.0'  // modified BSD, credits should be given to "the DOM4J Project - https://dom4j.github.io/"

    // JSON parsing
    implementation 'com.squareup.moshi:moshi:1.12.0' // Apache 2.0
    implementation 'com.squareup.moshi:moshi-adapters:1.12.0'  // Apache 2.0

    // HTTP server framework
    implementation group: 'org.takes', name: 'takes', version: '1.19'  // MIT
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'  // GPLv2 with classpath exemption
    // WebSocket server
    implementation group: 'org.glassfish.tyrus', name: 'tyrus-server', version: '2.0.1'  // EPL 2.0
    implementation group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-server', version: '2.0.1'  // EPL 2.0

    // HTTP client
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.1' // Apache 2.0

    // ClassGraph (FastClasspathScanner)
    implementation group: 'io.github.classgraph', name: 'classgraph', version: '4.8.102' // MIT

    // for debug UI
    implementation 'org.graphstream:gs-core:2.0'  // LGLPv3
    implementation 'org.graphstream:gs-ui-swing:2.0'  // LGLPv3

    // the logging API stub
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'  // MIT
    // the logging API implementation
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'  // EPL 1.0 (incompatible) and LGPL 2.1 (compatible)
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // Sentry
    implementation group: 'io.sentry', name: 'sentry', version: '5.0.1'  // MIT

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'  // EPL 2.0
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8'  // EPL 2.0
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8'  // EPL 2.0
    // jqwik for property based testing
    testImplementation 'net.jqwik:jqwik:1.5.6'  // EPL 2.0
    // mockito for mocking
    testImplementation 'org.mockito:mockito-inline:4.0.0'  // MIT
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'  // MIT

    // for linter annotations
    compileOnly 'net.jcip:jcip-annotations:1.0'  // CC Attribution
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.5.0'  // LGPLv2.1
    testCompileOnly 'net.jcip:jcip-annotations:1.0'  // CC Attribution
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:4.5.0'  // LGPLv2.1
}

application {
    mainClassName = 'fr.sncf.osrd.App'
}

sourceSets {
    test {
        resources {
            srcDirs = ["examples"]
        }
    }
}

shadowJar {
    archiveBaseName = 'osrd'
}

run {
    enableAssertions = true
}

test {
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter'
    }
}

checkstyle {
    toolVersion '8.37'
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    ignoreFailures false
    maxWarnings 0
    showViolations true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
    }
}

// enable all linter warnings, and error out on warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Werror"
    options.encoding = "UTF-8"
}

spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    // can also be 'more' or 'default'
    effort = 'max'
    // report all diagnosed bugs
    reportLevel = 'low'
    maxHeapSize = '1g'
}

task printSettings(type: DefaultTask) {
    println "java.home " + System.getProperty('java.home')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    if (project.hasProperty("spotbugs_report_xml")) {
        reports {xml.enabled = true}
    } else {
        reports {html.enabled = true}
    }
}

tasks.register("genExamples", Exec) {
    def python = isFamily(FAMILY_WINDOWS) ? "python.exe" : "python3"
    commandLine python, "examples/generate.py"
}

compileTestJava.dependsOn(genExamples)

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}
