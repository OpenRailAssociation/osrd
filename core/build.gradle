import static org.apache.tools.ant.taskdefs.condition.Os.*

plugins {
    id 'java'
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.ksp) apply false
    id 'application'
    id 'checkstyle'
    alias(libs.plugins.spotbugs)
    alias(libs.plugins.shadow)
    id 'jacoco'
    alias(libs.plugins.versions)
}

// region DEPENDENCIES

repositories {
    mavenCentral()
}

dependencies {
    // PLEASE ADD AND UPDATE DEPENDENCIES USING libs.versions.toml

    implementation project(':osrd-railjson')

    // kotlin
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.core
    testImplementation libs.kotlin.test
    testImplementation libs.kotlinx.coroutines.test

    implementation project(':kt-osrd-signaling')
    implementation project(":kt-osrd-sim-interlocking")
    implementation project(":kt-osrd-sim-infra")

    // base primitives
    implementation libs.guava

    // command line parsing
    implementation libs.jcommander

    // fast primitive collections
    implementation libs.hppc

    // JSON parsing
    implementation libs.moshi
    implementation libs.moshi.adapters

    // HTTP server framework
    implementation libs.takes
    implementation libs.javax.json.api

    // HTTP client
    implementation libs.okhttp

    // ClassGraph (FastClasspathScanner)
    implementation libs.classgraph

    // for debug UI
    implementation libs.jmathplot

    // the logging API stub
    implementation libs.slf4j

    // the logging API implementation
    implementation libs.logback.core
    implementation libs.logback.classic

    // Sentry
    implementation libs.sentry

    // Use JUnit Jupiter API for testing.
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.params
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly libs.junit.jupiter.engine
    // jqwik for property based testing
    testImplementation libs.jqwik
    // mockito for mocking
    testImplementation libs.mockito.inline
    testImplementation libs.mockito.junit.jupiter

    // Only needed to run tests in a version of IntelliJ IDEA that bundles older versions
    testRuntimeOnly libs.junit.platform.launcher

    // for linter annotations
    compileOnly libs.jcip.annotations
    compileOnly libs.spotbugs.annotations
    testCompileOnly libs.jcip.annotations
    testCompileOnly libs.spotbugs.annotations
}

// endregion

// region MAIN

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = 'fr.sncf.osrd.App'
}

def genExamplesDir = "$buildDir/generated_examples"

sourceSets {
    test {
        resources {
            // TODO: figure out the proper way to add generated resources to a source set
            //  https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSetOutput.html
            srcDirs = ["examples", genExamplesDir]
        }
    }
}

archivesBaseName = "osrd"

run {
    enableAssertions = true
}

// endregion

// region TESTS

test {
    useJUnitPlatform {
        includeEngines 'jqwik', 'junit-jupiter'
    }
}

def genExamples = tasks.register("genExamples", Exec) {
    inputs.files(fileTree('examples/generated/')).withPropertyName('sourceFiles')
    outputs.dir(genExamplesDir).withPropertyName('outputDir')
    def python = isFamily(FAMILY_WINDOWS) ? "python.exe" : "python3"
    commandLine python, "examples/generated/generate.py", genExamplesDir
}

genExamples.configure {
    onlyIf { !project.hasProperty('skipGenExamples') }
}

processTestResources.configure {
    dependsOn genExamples
}

// endregion

// region CODE_QUALITY

checkstyle {
    toolVersion '9.2'
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    ignoreFailures false
    maxWarnings 0
    showViolations true
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
    }
}

// enable all linter warnings, and error out on warnings
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Werror"
    options.encoding = "UTF-8"
}

spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    // can also be 'more' or 'default'
    effort = 'max'
    // report all diagnosed bugs
    reportLevel = 'low'
    maxHeapSize = '1g'
    excludeFilter = file('config/spotbugs/exclude.xml')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    if (project.hasProperty("spotbugs_report_xml")) {
        reports { xml.required = true }
    } else {
        reports { html.required = true }
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

// endregion

// region KOTLIN

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
    }
}

// endregion

tasks.register("printSettings", DefaultTask) {
    doLast {
        println "java.home " + System.getProperty('java.home')
    }
}
