openapi: 3.0.1
info:
  title: OSRD Core
  description: 'OSRD backend api description.'
  termsOfService: http://swagger.io/terms/
  license:
    name: GNU GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.fr.html
  version: 0.1.0
servers:
- url: http://gateway.dgexsol.fr/osrd/
  description: Production server
- url: http://gateway.staging.dgexsol.fr/osrd/
  description: Staging server
tags:
- name: health
  description: Check server health
- name: pathfinding
  description: Execute pathfinding on the infrastructure
- name: simulation
  description: Simulate a schedule on the infrastructure
paths:
  /health:
    get:
      tags:
      - health
      summary: Check server health
      operationId: health
      responses:
        200:
          description: The server is responding
  /pathfinding/routes:
    post:
      tags:
      - pathfinding
      summary: Find a path in the route graph that passes through waypoints.
      operationId: pathfinding_routes
      requestBody:
        description: Infrastructure id and waypoints
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathfindingRequest'
        required: true
      responses:
        200:
          description: Path found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PathfindingRoutesResult'
        400:
          description: The request body is invalid
  /pathfinding/tracks:
    post:
      tags:
      - pathfinding
      summary: Find a path in the track section graph that passes through waypoints.
      operationId: pathfinding_tracks
      requestBody:
        description: Infrastructure id and waypoints
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathfindingRequest'
        required: true
      responses:
        200:
          description: Path found
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PathfindingTracksResult'
        400:
          description: The request body is invalid
  /simulation:
    post:
      tags:
      - simulation
      summary: Simulate a scenario.
      operationId: simulation
      requestBody:
        description: Infra id, train rolling stocks and schedules.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationRequest'
        required: true
      responses:
        200:
          description: List of infrastructure changes and train movements.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SimulationResult'
        400:
          description: The request body is invalid
components:
  schemas:
    Waypoint:
      required:
      - track_section
      - direction
      - offset
      properties:
        track_section:
          type: string
        direction:
          type: string
          enum:
          - START_TO_STOP
          - STOP_TO_START
        offset:
          type: number
          format: double
          minimum: 0
    PathfindingRoutesResult:
      required:
      - track_sections
      - routes
      properties:
        routes:
          type: array
          minItems: 2
          items:
            type: string
        track_sections:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TrackSectionRange'
      example:
       routes: ["route_foo", "route_bar"]
       track_sections:
       -  track_section: "track_foo"
          begin_position: 4.2
          end_position: 178.3
    PathfindingTracksResult:
      required:
      - track_sections
      properties:
        track_sections:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TrackSectionRange'
      example:
       track_sections:
       -  track_section: "track_foo"
          begin_position: 4.2
          end_position: 178.3
    TrackLocation:
      required:
      - track_section
      - offset
      properties:
        track_section:
          type: string
        offset:
          type: number
          format: double
          minimum: 0
    TrackSectionRange:
      required:
      - track_section
      - begin_position
      - end_position
      properties:
        track_section:
          type: string
        begin_position:
          type: number
          format: double
          minimum: 0
        end_position:
          type: number
          format: double
          minimum: 0
    RollingStock:
      required:
      - id
      - length
      - mass
      - inertia_coefficient
      - rolling_resistance
      - capabilities
      - max_speed
      - startup_time
      - startup_acceleration
      - comfort_acceleration
      - timetable_gamma
      - tractive_effort_curve
      properties:
        id:
          type: string
        length:
          type: number
          format: double
          minimum: 0
          example: 400
        mass:
          type: number
          format: double
          minimum: 0
          example: 900000
        inertia_coefficient:
          type: number
          format: double
          minimum: 0
          example: 1.05
        rolling_resistance:
          oneOf:
          - $ref: '#/components/schemas/RollingResistanceDavis'
          discriminator:
            propertyName: type
            mapping:
              davis: '#/components/schemas/RollingResistanceDavis'
        capabilities:
          type: array
          items:
            type: string
            enum:
            - TVM300
            - TVM430
            - ETCS1
            - ETCS2
            - ETCS3
            - KVB
        max_speed:
          type: number
          format: double
          minimum: 0
          example: 80
        startup_time:
          type: number
          format: double
        startup_acceleration:
          type: number
          format: double
          example: 0.05
        comfort_acceleration:
          type: number
          format: double
          example: 0.25
        timetable_gamma:
          type: number
          format: double
          example: 0.5
        tractive_effort_curve:
          type: array
          items:
            type: object
            properties:
              speed:
                type: number
                format: double
                minimum: 0
              max_effort:
                type: number
                format: double
                minimum: 0
            example:
              speed: 20
              max_effort: 400000
    RollingResistanceDavis:
      required:
      - type
      - A
      - B
      - C
      properties:
        type:
          type: string
        A:
           type: number
           format: double
        B:
           type: number
           format: double
        C:
           type: number
           format: double
      example:
        type: "davis"
        A: 5400
        B: 200
        C: 12
    TrainSchedule:
      required:
      - id
      - rolling_stock
      - departure_time
      - initial_head_location
      - initial_route
      - initial_speed
      - phases
      properties:
        id:
          type: string
          example: "TrainID"
        rolling_stock:
          type: string
          example: "RollingStockID"
        departure_time:
          type: number
          format: double
          minimum: 0
        initial_head_location:
          $ref: '#/components/schemas/TrackLocation'
        initial_route:
          type: string
        initial_speed:
          type: number
          format: double
        phases:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/NavigatePhase'
            - $ref: '#/components/schemas/StopPhase'
            discriminator:
              propertyName: type
              mapping:
                navigate: '#/components/schemas/NavigatePhase'
                stop: '#/components/schemas/StopPhase'
    NavigatePhase:
      required:
      - type
      - routes
      - end_location
      - driver_sight_distance
      properties:
        type:
          type: string
          example: "navigate"
        routes:
          type: array
          items:
            type: string
          example: ["route1", "route2", "route3"]
        end_location:
          $ref: '#/components/schemas/TrackLocation'
        driver_sight_distance:
          type: number
          format: double
          minimum: 0
          example: 400
    StopPhase:
      required:
      - type
      - duration
      properties:
        type:
          type: string
          example: "stop"
        duration:
          type: number
          format: double
          minimum: 0
          example: 600
    SimulationResult:
      oneOf:
      - $ref: '#/components/schemas/SimulationResultRouteStatus'
      - $ref: '#/components/schemas/SimulationResultTrainLocation'
      - $ref: '#/components/schemas/SimulationResultSignalChange'
      discriminator:
        propertyName: type
        mapping:
          route_status: '#/components/schemas/SimulationResultRouteStatus'
          train_location: '#/components/schemas/SimulationResultTrainLocation'
          signal_change: '#/components/schemas/SimulationResultSignalChange'
    SimulationResultRouteStatus:
      required:
      - type
      - time
      - id
      - status
      properties:
        type:
          type: string
          example: "route_status"
        time:
          type: number
          format: double
        id:
          type: string
          example: "routeID"
        status:
          type: string
          enum:
          - FREE
          - RESERVED
          - OCCUPIED
          - CONFLICT
          - REQUESTED
    SimulationResultTrainLocation:
      required:
      - type
      - time
      - train_name
      - track_section
      - offset
      properties:
        type:
          type: string
          example: "train_location"
        time:
          type: number
          format: double
        train_name:
          type: string
          example: "trainID"
        track_section:
          type: string
          example: "trackSectionID"
        offset:
          type: number
          format: double
          minimum: 0
          example: 42
    SimulationResultSignalChange:
      required:
      - type
      - time
      - signal
      - aspects
      properties:
        type:
          type: string
          example: "signal_change"
        time:
          type: number
          format: double
        signal:
          type: string
          example: "signalID"
        aspects:
          type: array
          items:
            type: string
            example: "AspectID"
    PathfindingRequest:
      required:
      - infra
      - waypoints
      properties:
        infra:
          type: string
          example: "infraID"
        waypoints:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/Waypoint'
          example:
            -
              - track_section: "track_departure"
                direction: "START_TO_STOP"
                offset: 4.2
              - track_section: "track_departure_bis"
                direction: "START_TO_STOP"
                offset: 14.2
            -
              - track_section: "track_destination"
                direction: "STOP_TO_START"
                offset: 138.32
    SimulationRequest:
      required:
      - infra
      - rolling_stocks
      - train_schedules
      properties:
        infra:
          type: string
          example: "infraID"
        rolling_stocks:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/RollingStock'
        train_schedules:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TrainSchedule'
