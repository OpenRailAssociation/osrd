openapi: 3.0.1
info:
  title: OSRD Core
  description: OSRD backend api description
  termsOfService: http://swagger.io/terms/
  license:
    name: GNU GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.fr.html
  version: 0.1.0
servers:
  - url: http://gateway.dev.dgexsol.fr/osrd/
    description: Dev server
  - url: http://gateway.staging.dgexsol.fr/osrd/
    description: Staging server
tags:
  - name: health
    description: Check server health
  - name: pathfinding
    description: Execute pathfinding on the infrastructure
  - name: simulation
    description: Simulate a schedule on the infrastructure
paths:
  /health:
    get:
      tags:
        - health
      summary: Check server health
      operationId: health
      responses:
        200:
          description: The server is responding
  /version:
    get:
      responses:
        200:
          description: Return the service version
          content:
            application/json:
              schema:
                type: object
                properties:
                  git_describe:
                    type: string
                    nullable: true
                required:
                  - git_describe
  /pathfinding/routes:
    post:
      tags:
        - pathfinding
      summary: Find a path in the route graph that passes through waypoints.
      operationId: pathfinding_routes
      requestBody:
        description: Infrastructure id and waypoints
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PathfindingRequest"
        required: true
      responses:
        200:
          description: Path found
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PathfindingRoutesResult"
        400:
          description: The request body is invalid
  /pathfinding/tracks:
    post:
      tags:
        - pathfinding
      summary: Find a path in the track section graph that passes through waypoints.
      operationId: pathfinding_tracks
      requestBody:
        description: Infrastructure id and waypoints
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PathfindingRequest"
        required: true
      responses:
        200:
          description: Path found
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PathfindingTracksResult"
        400:
          description: The request body is invalid

  /stdcm:
    post:
      tags:
        - stdcm
      summary: Find a stdcm and return a simulation result
      requestBody:
        description: Infrastructure, waypoints and route occupancies
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/STDCMRequest"
      responses:
        200:
          description: Simulation result
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      simulation:
                        $ref: "#/components/schemas/SimulationResult"
                      path:
                        $ref: "#/components/schemas/PathfindingRoutesResult"
                      departure_time:
                        type: number
                        format: double
                  - type: object
                    properties:
                      error:
                        type: string
                        description: Error message
                        example: No path could be found
        400:
          description: The request body is invalid

  /simulation:
    post:
      tags:
        - simulation
      summary: Simulate a scenario.
      operationId: simulation
      requestBody:
        description: Infra id, train rolling stocks and schedules.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimulationRequest"
        required: true
      responses:
        200:
          description: List of infrastructure changes and train movements.
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SimulationResult"
        400:
          description: The request body is invalid
components:
  schemas:
    Waypoint:
      required:
        - track_section
        - direction
        - offset
      properties:
        track_section:
          type: string
        direction:
          type: string
          enum:
            - START_TO_STOP
            - STOP_TO_START
        offset:
          type: number
          format: double
          minimum: 0
    PathfindingRoutesResult:
      required:
        - track_sections
        - routes
      properties:
        routes:
          type: array
          minItems: 2
          items:
            type: string
        track_sections:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/TrackSectionRange"
      example:
        routes: ["route_foo", "route_bar"]
        track_sections:
          - track_section: "track_foo"
            begin_position: 4.2
            end_position: 178.3
    PathfindingTracksResult:
      required:
        - track_sections
      properties:
        track_sections:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/TrackSectionRange"
      example:
        track_sections:
          - track_section: "track_foo"
            begin_position: 4.2
            end_position: 178.3
    TrackLocation:
      required:
        - track_section
        - offset
      properties:
        track_section:
          type: string
        offset:
          type: number
          format: double
          minimum: 0
    TrackSectionRange:
      required:
        - track_section
        - begin_position
        - end_position
      properties:
        track_section:
          type: string
        begin_position:
          type: number
          format: double
          minimum: 0
        end_position:
          type: number
          format: double
          minimum: 0
    RollingStock:
      required:
        - id
        - length
        - mass
        - inertia_coefficient
        - a
        - b
        - c
        - max_speed
        - startup_time
        - startup_acceleration
        - comfort_acceleration
        - gamma
        - gamma_type
        - loading_gauge_type
        - modes
        - default_modes
      properties:
        id:
          type: string
        length:
          type: number
          format: double
          minimum: 0
          example: 400
        mass:
          type: number
          format: double
          minimum: 0
          example: 900000
        inertia_coefficient:
          type: number
          format: double
          minimum: 0
          example: 1.05
        a:
          type: number
          format: double
        b:
          type: number
          format: double
        c:
          type: number
          format: double
        max_speed:
          type: number
          format: double
          minimum: 0
          example: 80
        startup_time:
          type: number
          format: double
        startup_acceleration:
          type: number
          format: double
          example: 0.05
        comfort_acceleration:
          type: number
          format: double
          example: 0.25
        gamma:
          type: number
          format: double
          example: 0.5
        gamma_type:
          type: string
          enum:
            - CONST
            - MAX
        loading_gauge_type:
          type: string
          enum:
            - G1
            - G2
            - GA
            - GB
            - GB1
            - GC
            - FR3_3
            - FR3_3_GB_G2
        modes:
        ######### ask about it
        default_mode:
          type: string
          example: "Mode"
    TrainSchedule:
      required:
        - id
        - rolling_stock
        - departure_time
        - initial_head_location
        - initial_speed
        - final_head_location
        - stops
        - routes
        - train_transition_delay
        - tag
      properties:
        id:
          type: string
          example: "TrainID"
        rolling_stock:
          type: string
          example: "RollingStockID"
        departure_time:
          type: number
          format: double
          minimum: 0
        initial_head_location:
          $ref: "#/components/schemas/TrackLocation"
        initial_speed:
          type: number
          format: double
        final_head_location:
          $ref: "#/components/schemas/TrackLocation"
        stops:
          type: array
          items:
            type: object
            properties:
              position:
                type: number
                format: double
              location:
                $ref: "#/components/schemas/TrackLocation"
              duration:
                type: number
                format: double
        routes:
          $ref: "#/components/schemas/Pathfinding/routes"
        train_transition_delay:
          type: number
          format: double
        tag:
          type: string
          example: "tag"
    SimulationResult:
      oneOf:
        - $ref: "#/components/schemas/SimulationResultRouteStatus"
        - $ref: "#/components/schemas/SimulationResultTrainLocation"
        - $ref: "#/components/schemas/SimulationResultSignalChange"
      discriminator:
        propertyName: type
        mapping:
          route_status: "#/components/schemas/SimulationResultRouteStatus"
          train_location: "#/components/schemas/SimulationResultTrainLocation"
          signal_change: "#/components/schemas/SimulationResultSignalChange"
    SimulationResultRouteStatus:
      required:
        - type
        - time
        - id
        - status
      properties:
        type:
          type: string
          example: "route_status"
        time:
          type: number
          format: double
        id:
          type: string
          example: "routeID"
        status:
          type: string
          enum:
            - FREE
            - RESERVED
            - OCCUPIED
            - CONFLICT
            - REQUESTED
    SimulationResultTrainLocation:
      required:
        - type
        - time
        - train_name
        - track_section
        - offset
      properties:
        type:
          type: string
          example: "train_location"
        time:
          type: number
          format: double
        train_name:
          type: string
          example: "trainID"
        track_section:
          type: string
          example: "trackSectionID"
        offset:
          type: number
          format: double
          minimum: 0
          example: 42
    SimulationResultSignalChange:
      required:
        - type
        - time
        - signal
        - aspects
      properties:
        type:
          type: string
          example: "signal_change"
        time:
          type: number
          format: double
        signal:
          type: string
          example: "signalID"
        aspects:
          type: array
          items:
            type: string
            example: "AspectID"
    PathfindingRequest:
      required:
        - infra
        - waypoints
        - rolling_stocks
      properties:
        infra:
          type: string
          example: "infraID"
        waypoints:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 1
            items:
              $ref: "#/components/schemas/Waypoint"
          example:
            - - track_section: "track_departure"
                direction: "START_TO_STOP"
                offset: 4.2
              - track_section: "track_departure_bis"
                direction: "START_TO_STOP"
                offset: 14.2
            - - track_section: "track_destination"
                direction: "STOP_TO_START"
                offset: 138.32
        rolling_stocks:
          $ref: "#/components/schemas/RollingStock"
    STDCMRequest:
      properties:
        infra:
          type: string
          example: "infraID"
        rolling_stocks:
          $ref: "#/components/schemas/RollingStock"
        route_occupancies:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Route ID
              start_occupancy_time:
                type: number
                format: double
              end_occupancy_time:
                type: number
                format: double
        start_time:
          type: number
          format: double
        end_time:
          type: number
          format: double
        start_points:
          type: array
          items:
            $ref: "#/components/schemas/Waypoint"
          minimum: 1
        end_points:
          type: array
          items:
            $ref: "#/components/schemas/Waypoint"
          minimum: 1
        speed_limit_composition:
          type: string
          description: Train composition used for speed limit
        margin_before:
          type: number
          format: double
          description: |
            Margin of x seconds before the train passage, which means that the path used by the train should
            be free and available at least x seconds before its passage.
        margin_after:
          type: number
          format: double
          description: |
            Margin of y seconds after the train passage, which means that the path used by the train should
            be free and available at least y seconds after its passage.
    SimulationRequest:
      required:
        - infra
        - time_step
        - rolling_stocks
        - train_schedules
        - trains_path
      properties:
        infra:
          type: string
          example: "infraID"
        time_step:
          type: number
          format: double
        rolling_stocks:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/RollingStock"
        train_schedules:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/TrainSchedule"
        trains_path:
        ######## ask about it
    AllowanceValue:
      oneOf:
        - $ref: "#/components/schemas/TimePerDistanceAllowanceValue"
        - $ref: "#/components/schemas/TimeAllowanceValue"
        - $ref: "#/components/schemas/PercentageAllowanceValue"
      discriminator:
        propertyName: value_type
    TimePerDistanceAllowanceValue:
      properties:
        value_type:
          type: string
          enum: ["time_per_distance"]
        minutes:
          type: number
          format: double
          description: time to add per 100km in minutes
    TimeAllowanceValue:
      properties:
        value_type:
          type: string
          enum: ["time"]
        seconds:
          type: number
          format: double
          description: time to add over the whole range in seconds
    PercentageAllowanceValue:
      properties:
        value_type:
          type: string
          enum: ["percentage"]
        percentage:
          type: number
          format: double
          description: in %, how much time do we add compared to the fastest run time
