version: '3'

volumes:
  psql_data:
  valkey_data:
  rabbitmq_data:

services:
  postgres:
    image: ${OSRD_POSTGIS_IMAGE:-postgis/postgis:16-3.4-alpine}
    container_name: osrd-postgres
    user: postgres
    restart: unless-stopped
    ports: ["5432:5432"]
    environment:
      POSTGRES_PASSWORD: "password"
    volumes:
      - "psql_data:/var/lib/postgresql/data"
      - "./docker/init_db.sql:/docker-entrypoint-initdb.d/init.sql"
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "postgres://osrd:password@postgres/osrd"]
      start_period: 4s
      interval: 5s
      retries: 20

  valkey:
    image: valkey/valkey:alpine
    container_name: osrd-valkey
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes:
      - "valkey_data:/data"
      - "./docker/valkey.conf:/etc/valkey.conf"
    command: "valkey-server /etc/valkey.conf --save 30 1 --loglevel warning"
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      start_period: 4s
      interval: 5s
      retries: 20

  rabbitmq:
    image: rabbitmq:4-management
    container_name: osrd-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: osrd
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - "./docker/rabbitmq.conf:/etc/rabbitmq/conf.d/99-osrd.conf"
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 20

  core:
    # This is a dummy container to build the core image
    # and document/provide parameters to other compose files
    image: ghcr.io/openrailassociation/osrd-edge/osrd-core:${TAG-dev}
    container_name: osrd-core-dummy
    depends_on:
      rabbitmq: {condition: service_healthy}
    build:
      context: core
      dockerfile: Dockerfile
      additional_contexts:
        test_data: tests/data
        static_assets: assets
    environment:
      # Actual values in ./docker/osrdyne.yml (please maintain consistency)
      # Provided here only for reuse in compose layers and doc
      CORE_EDITOAST_URL: "http://osrd-editoast"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/opentelemetry-javaagent.jar"
      CORE_MONITOR_TYPE: "opentelemetry"
      OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://jaeger:4317"
      OTEL_METRICS_EXPORTER: "none"
      OTEL_LOGS_EXPORTER: "none"
    restart: "no"
    command: "true"

  front:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-front:${TAG-dev}-${OSRD_FRONT_MODE-devel}
    container_name: osrd-front
    build:
      context: front
      additional_contexts:
        test_data: tests/data
      dockerfile: docker/Dockerfile.${OSRD_FRONT_MODE-devel}
      args:
        OSRD_GIT_DESCRIBE: ${OSRD_GIT_DESCRIBE}
    environment:
      FRONT_PORT: 3000  # only useful with the prod config
      OSRD_EDITOAST_URL: /api
    volumes:
      - "./front:/app"
      - "./tests/data:/tests/data"
    restart: unless-stopped
    ports: ["3000:3000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      start_period: 4s
      interval: 5s
      retries: 6

  editoast:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-editoast:${TAG-dev}
    container_name: osrd-editoast
    depends_on:
      postgres: {condition: service_healthy}
      valkey: {condition: service_healthy}
      rabbitmq: {condition: service_healthy}
    build:
      context: editoast
      dockerfile: Dockerfile
      additional_contexts:
        test_data: tests/data
        static_assets: assets
      args:
        CARGO_PROFILE: dev
    restart: unless-stopped
    ports: ["8090:80"]
    environment:
      EDITOAST_PORT: 80
      VALKEY_URL: "redis://valkey"
      DATABASE_URL: "postgres://osrd:password@postgres/osrd"
      OSRDYNE_API_URL: "http://osrd-osrdyne:4242/"
      TELEMETRY_KIND: "opentelemetry"
      TELEMETRY_ENDPOINT: "http://jaeger:4317"
      OSRD_MQ_URL: "amqp://osrd:password@osrd-rabbitmq:5672/%2f"
    command:
      - /bin/sh
      - -c
      - "diesel migration run && exec editoast runserver"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      start_period: 4s
      interval: 5s
      retries: 6

  gateway:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-gateway:${TAG-dev}-standalone
    container_name: osrd-gateway
    build:
      context: gateway
      dockerfile: Dockerfile
      args:
        OSRD_GIT_DESCRIBE: ${OSRD_GIT_DESCRIBE}
        CARGO_PROFILE: dev
    volumes:
      - "./docker/gateway.dev.simple.toml:/gateway.toml"
    restart: unless-stopped
    ports: ["4000:4000"]

  osrd-images:
    image: ghcr.io/openrailassociation/osrd-stable/osrd-images:${TAG_IMAGES-v1.0.0}
    container_name: osrd-images
    restart: unless-stopped
    environment:
      - NGINX_PORT=8080
    ports: ["8080:8080"]

  osrdyne:
    image: ghcr.io/openrailassociation/osrd-edge/osrd-osrdyne:${TAG-dev}
    container_name: osrd-osrdyne
    depends_on:
      rabbitmq: {condition: service_healthy}
    command: osrdyne
    volumes:
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
      - ./docker/osrdyne.yml:/osrdyne.yml
    build:
      context: osrdyne
      dockerfile: Dockerfile
      args:
        CARGO_PROFILE: dev
    restart: unless-stopped
    ports: ["4242:4242"]
    environment:
      RUST_LOG: "info"

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: osrd-jaeger
    restart: unless-stopped
    ports:
      - "4317:4317"
      - "4318:4318"
      - "16686:16686"

  wait-healthy:
    depends_on:
      editoast: {condition: service_healthy}
    restart: "no"
    image: alpine:latest
    command: "true"
