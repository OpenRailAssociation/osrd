name: Test Editoast

on:
  workflow_dispatch:
  pull_request:
    paths:
      - editoast/**
      - .github/workflows/editoast.yml
  merge_group:
    paths:
      - editoast/**
      - .github/workflows/editoast.yml
  push:
    branches:
      - dev
      - staging
      - prod

jobs:
  editoast_openapi:
    name: Check openapi.yaml sync
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # run the CI on the actual latest commit of the PR, not the attempted merge
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install lib posgresql & geos
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libgeos-dev

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Load cached target
        uses: actions/cache@v3
        id: cached-cargo-dependencies
        with:
          path: editoast/target/
          key: osrd-editoast-openapi-target-${{ hashFiles('editoast/Cargo.lock') }}

      - name: Check openapi.yaml sync
        run: diff <(cargo run --release --manifest-path editoast/Cargo.toml -- openapi) editoast/openapi.yaml

  editoast_tests:
    name: Tests editoast and check coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # run the CI on the actual latest commit of the PR, not the attempted merge
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install lib posgresql & geos
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libgeos-dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build the containers
        uses: docker/bake-action@v3
        with:
          load: true
          files: "docker-compose.yml"
          targets: "api"
          set: |
            api.cache-from=type=gha,scope=api
            api.cache-to=type=gha,mode=max,scope=api

      - name: Startup the postgres, redis and api
        run: "docker-compose up --no-build -d postgres redis api"
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Load cached target
        uses: actions/cache@v3
        id: cached-cargo-dependencies
        with:
          path: editoast/target/
          key: osrd-editoast-target-tests-${{ hashFiles('editoast/Cargo.lock') }}

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Test and coverage
        run: cargo tarpaulin -r ./editoast --out Xml -- --test-threads 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          # github runs PR workflows on the result of a merge commit.
          # tell codecov the sha of the unmerged PR https://github.com/codecov/uploader/issues/525
          override_commit: "${{ github.event.pull_request.head.sha }}"
          name: codecov
          flags: editoast
          files: cobertura.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  editoast_linter:
    name: Check format and run linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # run the CI on the actual latest commit of the PR, not the attempted merge
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install lib posgresql & geos
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libgeos-dev

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Load cached target
        uses: actions/cache@v3
        id: cached-cargo-dependencies
        with:
          path: editoast/target/
          key: osrd-editoast-target-linter-${{ hashFiles('editoast/Cargo.lock') }}

      - name: Format check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path editoast/Cargo.toml --check

      - name: Clippy linter
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets --manifest-path=editoast/Cargo.toml -- -D warnings

      - name: Documentation check
        run: cargo doc --manifest-path editoast/Cargo.toml
        env:
          RUSTDOCFLAGS: "-D warnings" # Set warnings as errors
