name: Test railjson_generator

on:
  workflow_dispatch:
  pull_request:
    paths:
      - python/railjson_generator/**
      - .github/workflows/railjson_generator.yml
  push:
    branches:
      - dev
      - staging
      - prod

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Load cached venv
        uses: actions/cache@v3
        id: cached-poetry-railjson-generator-dependencies
        with:
          path: python/railjson_generator/.venv
          key: cached-poetry-railjson-generator-dependencies-${{ hashFiles('python/railjson_generator/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-railjson-generator-dependencies.outputs.cache-hit != 'true'
        run: |
          cd python/railjson_generator
          poetry install --only dev
      - name: Flake8
        run: |
          cd python/railjson_generator
          poetry run pflake8 --config ./pyproject.toml --output-file flake8.xml --format junit-xml
      - name: Publish flake8 report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          report_paths: flake8.xml
      - name: Black
        run: |
          cd python/railjson_generator
          poetry run black . --check
      - name: Isort
        run: |
          cd python/railjson_generator
          poetry run isort . --check
