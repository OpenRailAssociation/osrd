name: Test API

on:
  workflow_dispatch:
  pull_request:
    paths:
      - python/api/**
      - .github/workflows/api.yml
  merge_group:
    paths:
      - python/api/**
      - .github/workflows/api.yml
  push:
    branches:
      - dev
      - staging
      - prod

jobs:
  api_tests:
    name: Tests API
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "poetry"
      - name: Init database
        run: psql postgresql://postgres:password@localhost -f init_db.sql
      - name: Install GDAL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin
      - name: Install dependencies
        run: |
          cd python/api
          poetry install --no-interaction --no-root -E production
      - name: Check migrations
        env:
          OSRD_DEV: "True"
        run: |
          cd python/api
          poetry run python manage.py makemigrations --check
      - name: Run migrations
        env:
          OSRD_DEV: "True"
        run: |
          cd python/api
          poetry run python manage.py migrate
      - name: Run Tests
        env:
          OSRD_DEV: "True"
        run: |
          cd python/api
          poetry run python manage.py test

  api_linter_formatter:
    name: Linter and formatter API
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "poetry"
      - name: Install dependencies
        run: |
          cd python/api
          poetry install --only dev
      - name: Flake8
        run: |
          cd python/api
          poetry run pflake8 --config ./pyproject.toml --output-file flake8.xml --format junit-xml
      - name: Publish flake8 report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          report_paths: api/flake8.xml
      - name: Black
        run: |
          cd python/api
          poetry run black . --check
      - name: Isort
        run: |
          cd python/api
          poetry run isort . --check
