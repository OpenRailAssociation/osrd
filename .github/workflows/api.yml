name: Test API

on:
  workflow_dispatch:
  pull_request:
    paths:
      - python/api/**
  push:
    branches:
      - dev
      - staging
      - prod

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Init database
        run: psql postgresql://postgres:password@localhost -f init_db.sql
      - name: Install GDAL
        run: sudo apt-get install -y gdal-bin
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Load cached venv
        uses: actions/cache@v3
        id: cached-poetry-dependencies
        with:
          path: python/api/.venv
          key: osrd-api-venv-${{ hashFiles('python/api/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          cd python/api
          poetry install --no-interaction --no-root -E production
      - name: Check migrations
        env:
          OSRD_DEV: "True"
        run: |
          cd python/api
          source .venv/bin/activate
          python manage.py makemigrations --check
      - name: Run migrations
        env:
          OSRD_DEV: "True"
        run: |
          cd python/api
          source .venv/bin/activate
          python manage.py migrate
        run: 
      - name: Run Tests
        env:
          OSRD_DEV: "True"
        run: |
          cd python/api
          source .venv/bin/activate
          python manage.py test

  linter-formatter:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      - name: Load cached venv
        uses: actions/cache@v3
        id: cached-poetry-only-dev-dependencies
        with:
          path: api/.venv
          key: cached-poetry-only-dev-dependencies-${{ hashFiles('api/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-only-dev-dependencies.outputs.cache-hit != 'true'
        run: |
          cd api
          poetry install --only dev
      - name: Flake8
        run: pflake8 --config python/api/pyproject.toml --format junit-xml python/api > flake8.xml
      - name: Publish flake8 report
        uses: mikepenz/action-junit-report@v3
        if: failure()
        with:
          report_paths: api/flake8.xml
      - name: Black
        run: |
          cd api
          poetry run black . --check
      - name: Isort
        run: |
          cd api
          poetry run isort . --check
